Example calculation from keygen:

[6 3 2 5 3 4 5 1 6 2 4 8 8 3 6 5 4 2 5 3 7 1 4 0]
[0 3 2 5 3 4 5 1 5 6 4 8 8 3 2 6 4 2 5 3 7 1 4 6]
trio: 32, binary: 100000, 5-bit num 1: 00001, 5-bit num 2: 00000
trio: 534, binary: 1000010110, 5-bit num 1: 10000, 5-bit num 2: 10110
trio: 515, binary: 1000000011, 5-bit num 1: 10000, 5-bit num 2: 00011
trio: 648, binary: 1010001000, 5-bit num 1: 10100, 5-bit num 2: 01000
trio: 832, binary: 1101000000, 5-bit num 1: 11010, 5-bit num 2: 00000
trio: 642, binary: 1010000010, 5-bit num 1: 10100, 5-bit num 2: 00010
trio: 537, binary: 1000011001, 5-bit num 1: 10000, 5-bit num 2: 11001
trio: 146, binary: 10010010, 5-bit num 1: 00100, 5-bit num 2: 10010
Result: MFV9V4R75FRTVUBD


Input into Gameboy Shark MX ROM:

MFV9V4R75FRTVUBD


Output from Gameboy Shark MX ROM in memory:
0 3 2 5 3 4 5 1 5 6 4 8 8 3 2 6 4 2 5 3 7 1 4 6

after gamre registration screen jumble the numbers in memory:

6 3 1 5 3 4 5 1 6 2 4 8 8 3 6 5 4 2 5 3 7 2 4 0




checking and looks like byte 3 and byte 22 need to be swapped:
6 3 1 5 3 4 5 1 6 2 4 8 8 3 6 5 4 2 5 3 7 2 4 0
6 3 2 5 3 4 5 1 6 2 4 8 8 3 6 5 4 2 5 3 7 1 4 0


TRY AGAIN
__________

generating seed data...
[2 8 2 8 8 1 1 3 5 4 4 2 8 4 8 8 4 2 6 8 2 2 7 3]
checksum calculation
checksum: 90
[2 8 2 8 8 1 1 3 5 4 4 2 8 4 8 8 4 2 6 8 2 2 9 0]
[0 8 2 8 8 1 1 3 8 8 4 8 2 4 4 5 4 2 6 8 2 2 9 2]
trio: 82, binary: 1010010, 5-bit num 1: 00010, 5-bit num 2: 10010
trio: 881, binary: 1101110001, 5-bit num 1: 11011, 5-bit num 2: 10001
trio: 138, binary: 10001010, 5-bit num 1: 00100, 5-bit num 2: 01010
trio: 848, binary: 1101010000, 5-bit num 1: 11010, 5-bit num 2: 10000
trio: 244, binary: 11110100, 5-bit num 1: 00111, 5-bit num 2: 10100
trio: 542, binary: 1000011110, 5-bit num 1: 10000, 5-bit num 2: 11110
trio: 682, binary: 1010101010, 5-bit num 1: 10101, 5-bit num 2: 01010
trio: 292, binary: 100100100, 5-bit num 1: 01001, 5-bit num 2: 00100
Result: TDC6BL5VWRVXYLEB

Process finished with exit code 0



Input into Gameboy Shark MX ROM:
TDC6BL5VWRVXYLEB



Output from Gameboy Shark MX ROM in memory:
0 8 2 8 8 1 1 3 8 8 4 8 2 4 4 5 4 2 6 8 2 2 9 2

after gamre registration screen jumble the numbers in memory:

2 8 2 8 8 1 1 3 5 4 4 2 8 4 8 8 4 2 6 8 2 2 9 0

expected checksum: 51

try to manually calculate key before programming it:

2 8 2 8 8 1 1 3 5 4 4 2 8 4 8 8 4 2 6 8 2 2 9 0
becomes
2 8 2 8 8 1 1 3 5 4 4 2 8 4 8 8 4 2 6 8 2 2 5 1
becomes
0. 2 8 2 8 8 1 1 3 5 4 4 2 8 4 8 8 4 2 6 8 2 2 5 1
1. 1 8 2 8 8 1 1 3 5 4 4 2 8 4 8 8 4 2 6 8 2 2 5 2
2. 1 2 2 8 8 1 1 3 5 4 4 2 8 4 8 8 4 2 6 8 2 8 5 2
3. 1 2 2 8 8 1 1 3 8 4 4 2 8 4 8 5 4 2 6 8 2 8 5 2
4. 1 2 2 8 8 1 1 3 8 8 4 2 8 4 4 5 4 2 6 8 2 8 5 2
5. 1 2 2 8 8 1 1 3 8 8 4 8 2 4 4 5 4 2 6 8 2 8 5 2 

debugger in go program injecting last value and resuming program results in:
45C6BL5VWRVXYL5R

expected checksum: 81


==============

take a known key:

SHGGGGGGGGGGGGGQ

3 6 6 7 5 9 7 5 9 7 5 9 7 5 9 7 5 9 7 5 9 7 6 5

5 6 7 7 5 9 7 5 7 9 5 7 9 5 7 9 5 9 7 5 9 6 6 3

expected checksum: 6 3

===================

now pass this to half way through go program where byte shifting occurs to see if this part works.

result produced is:

SHGGGGGGGGGGGGGQ

IT WORKS! HAZAA! The problem with the keygen is now known to be in calculating or applying the checksum.

======================

generating seed data...
[2 3 8 6 4 4 5 5 4 3 6 5 1 2 7 8 4 6 3 7 8 1 2 5]
checksum calculation
checksum: 31
[2 3 8 6 4 4 5 5 4 3 6 5 1 2 7 8 4 6 3 7 8 1 3 1]
[1 3 1 6 4 4 5 5 8 7 6 1 5 2 3 4 4 6 3 7 8 8 3 2]
trio: 131, binary: 10000011, 5-bit num 1: 00100, 5-bit num 2: 00011
trio: 644, binary: 1010000100, 5-bit num 1: 10100, 5-bit num 2: 00100
trio: 558, binary: 1000101110, 5-bit num 1: 10001, 5-bit num 2: 01110
trio: 761, binary: 1011111001, 5-bit num 1: 10111, 5-bit num 2: 11001
trio: 523, binary: 1000001011, 5-bit num 1: 10000, 5-bit num 2: 01011
trio: 446, binary: 110111110, 5-bit num 1: 01101, 5-bit num 2: 11110
trio: 378, binary: 101111010, 5-bit num 1: 01011, 5-bit num 2: 11010
trio: 832, binary: 1101000000, 5-bit num 1: 11010, 5-bit num 2: 00000
Result: B4RB6HGUVSAXS55F

all numbers correct except resulting checksum.

correct checksum: 11

=============================

generating seed data...
[7 2 8 4 3 7 1 1 6 4 6 3 1 2 8 3 5 8 4 1 1 7 4 2]
checksum calculation
checksum: 25
[7 2 8 4 3 7 1 1 6 4 6 3 1 2 8 3 5 8 4 1 1 7 2 5]
[5 2 7 4 3 7 1 1 3 8 6 1 3 2 4 6 5 8 4 1 1 8 2 7]
trio: 527, binary: 1000001111, 5-bit num 1: 10000, 5-bit num 2: 01111
trio: 437, binary: 110110101, 5-bit num 1: 01101, 5-bit num 2: 10101
trio: 113, binary: 1110001, 5-bit num 1: 00011, 5-bit num 2: 10001
trio: 861, binary: 1101011101, 5-bit num 1: 11010, 5-bit num 2: 11101
trio: 324, binary: 101000100, 5-bit num 1: 01010, 5-bit num 2: 00100
trio: 658, binary: 1010010010, 5-bit num 1: 10100, 5-bit num 2: 10010
trio: 411, binary: 110011011, 5-bit num 1: 01100, 5-bit num 2: 11011
trio: 827, binary: 1100111011, 5-bit num 1: 11001, 5-bit num 2: 11011
Result: VOAY465QLBRDZCUC

all numbers correct except resulting checksum.

correct checksum: 29


